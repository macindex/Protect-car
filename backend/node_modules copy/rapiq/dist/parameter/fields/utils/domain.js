"use strict";
/*
 * Copyright (c) 2022.
 * Author Peter Placzek (tada5hi)
 * For the full copyright and license information,
 * view the LICENSE file that was distributed with this source code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeFieldsDomainRecords = exports.buildFieldDomainRecords = void 0;
const utils_1 = require("../../../utils");
const constants_1 = require("../../../constants");
function buildFieldDomainRecords(data) {
    if (typeof data === 'undefined') {
        return {};
    }
    let domainFields = {};
    if (Array.isArray(data)) {
        domainFields[constants_1.DEFAULT_ALIAS_ID] = data;
    }
    else {
        domainFields = data;
    }
    return domainFields;
}
exports.buildFieldDomainRecords = buildFieldDomainRecords;
function mergeFieldsDomainRecords(sourceA, sourceB) {
    const target = {};
    let keys = Object.keys(sourceA);
    for (let i = 0; i < keys.length; i++) {
        if ((0, utils_1.hasOwnProperty)(sourceB, keys[i])) {
            target[keys[i]] = [...sourceA[keys[i]], ...sourceB[keys[i]]];
        }
        else {
            target[keys[i]] = [...sourceA[keys[i]]];
        }
    }
    keys = Object.keys(sourceB).filter((key) => !keys.includes(key));
    for (let i = 0; i < keys.length; i++) {
        if ((0, utils_1.hasOwnProperty)(sourceA, keys[i])) {
            target[keys[i]] = [...sourceA[keys[i]], ...sourceB[keys[i]]];
        }
        else {
            target[keys[i]] = [...sourceB[keys[i]]];
        }
    }
    keys = Object.keys(target);
    if (keys.length >= 2 &&
        (0, utils_1.hasOwnProperty)(target, constants_1.DEFAULT_ALIAS_ID) &&
        Array.isArray(target[constants_1.DEFAULT_ALIAS_ID]) &&
        target[constants_1.DEFAULT_ALIAS_ID].length === 0) {
        delete target[constants_1.DEFAULT_ALIAS_ID];
    }
    return target;
}
exports.mergeFieldsDomainRecords = mergeFieldsDomainRecords;
//# sourceMappingURL=domain.js.map