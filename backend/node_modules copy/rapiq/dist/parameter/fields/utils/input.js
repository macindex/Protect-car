"use strict";
/*
 * Copyright (c) 2022.
 * Author Peter Placzek (tada5hi)
 * For the full copyright and license information,
 * view the LICENSE file that was distributed with this source code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseFieldsInput = exports.transformFieldsInput = exports.removeFieldInputOperator = void 0;
const constants_1 = require("../constants");
function removeFieldInputOperator(field) {
    return field.substring(0, 1) === constants_1.FieldOperator.INCLUDE ||
        field.substring(0, 1) === constants_1.FieldOperator.EXCLUDE ?
        field.substring(1) :
        field;
}
exports.removeFieldInputOperator = removeFieldInputOperator;
function transformFieldsInput(fields) {
    const output = {
        default: [],
        included: [],
        excluded: [],
    };
    for (let i = 0; i < fields.length; i++) {
        let operator;
        if (fields[i].substring(0, 1) === constants_1.FieldOperator.INCLUDE) {
            operator = constants_1.FieldOperator.INCLUDE;
        }
        else if (fields[i].substring(0, 1) === constants_1.FieldOperator.EXCLUDE) {
            operator = constants_1.FieldOperator.EXCLUDE;
        }
        if (operator) {
            fields[i] = fields[i].substring(1);
            switch (operator) {
                case constants_1.FieldOperator.INCLUDE: {
                    output.included.push(fields[i]);
                    break;
                }
                case constants_1.FieldOperator.EXCLUDE: {
                    output.excluded.push(fields[i]);
                    break;
                }
            }
        }
        else {
            output.default.push(fields[i]);
        }
    }
    return output;
}
exports.transformFieldsInput = transformFieldsInput;
function parseFieldsInput(data) {
    const valuePrototype = Object.prototype.toString.call(data);
    if (valuePrototype !== '[object Array]' &&
        valuePrototype !== '[object String]') {
        return [];
    }
    let fieldsArr = [];
    /* istanbul ignore next */
    if (valuePrototype === '[object String]') {
        fieldsArr = data.split(',');
    }
    /* istanbul ignore next */
    if (valuePrototype === '[object Array]') {
        fieldsArr = data
            .filter((val) => typeof val === 'string');
    }
    return fieldsArr;
}
exports.parseFieldsInput = parseFieldsInput;
//# sourceMappingURL=input.js.map